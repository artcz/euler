# coding: utf-8

"""
Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
"""

import itertools
import time


def oneliner():

    fib = lambda x: fib(x-1)+fib(x-2) if x > 2 else 1
    return sum(
        fib(z) for z
        in itertools.takewhile(
            lambda n: fib(n) <= 4*10**6,
            itertools.count()
        )
        if fib(z) % 2 == 0
    )


def impl1():
    oldfib = 1
    fib = 1
    even = []

    while fib <= 4*10**6:
        if fib % 2 == 0:
            even.append(fib)
        fib, oldfib = fib + oldfib, fib

    return sum(even)


def impl2():
    prev, fib = 1, 1
    _sum = 0

    while fib <= 4*10**6:
        if fib % 2 == 0:
            _sum += fib
        fib, prev = fib + prev, fib

    return _sum



if __name__ == "__main__":

    def timeit(function):
        t1 = time.time()
        output = function()
        t2 = time.time()
        return output, t2-t1

    print timeit(impl1)
    print timeit(impl2)
    print timeit(oneliner)
